
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/data/hess.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_data_hess.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_data_hess.py:


H.E.S.S. with Gammapy
=====================
Explore H.E.S.S. event lists and IRFs.

`H.E.S.S. <https://www.mpi-hd.mpg.de/hfm/HESS/>`__ is an array of
gamma-ray telescopes located in Namibia. Gammapy is regularly used and
fully supports H.E.S.S. high level data analysis, after export to the
current `open data level 3
format <https://gamma-astro-data-formats.readthedocs.io/>`__.

The H.E.S.S. data is private, and H.E.S.S. analysis is mostly documented
and discussed at https://hess-confluence.desy.de/ and in
H.E.S.S.-internal communication channels. However, in 2018, a small
sub-set of archival H.E.S.S. data was publicly released, called the
`H.E.S.S. DL3
DR1 <https://www.mpi-hd.mpg.de/hfm/HESS/pages/dl3-dr1/>`__, the data
level 3, data release number 1. This dataset is 50 MB in size and is
used in many Gammapy analysis tutorials, and can be downloaded via
`gammapy
download <https://docs.gammapy.org/dev/getting-started/index.html#quickstart-setup>`__.

This notebook is a quick introduction to this specific DR1 release. It
briefly describes H.E.S.S. data and instrument responses and show a
simple exploration of the data with the creation of theta-squared plot.

H.E.S.S. members can find details on the DL3 FITS production on this
`Confluence
page <https://hess-confluence.desy.de/confluence/display/HESS/HESS+FITS+data>`__
and access more detailed tutorials in this
`repository <https://bitbucket.org/hess_software/hess-open-source-tools/src/master/>`__

DL3 DR1
-------

This is how to access data and IRFs from the H.E.S.S. data level 3, data
release 1.

.. GENERATED FROM PYTHON SOURCE LINES 40-51

.. code-block:: Python


    import astropy.units as u
    from astropy.coordinates import SkyCoord

    # %matplotlib inline
    import matplotlib.pyplot as plt
    from IPython.display import display
    from gammapy.data import DataStore
    from gammapy.makers.utils import make_theta_squared_table
    from gammapy.maps import MapAxis, WcsGeom








.. GENERATED FROM PYTHON SOURCE LINES 52-54

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 54-60

.. code-block:: Python

    from gammapy.utils.check import check_tutorials_setup
    from gammapy.visualization import plot_theta_squared_table

    check_tutorials_setup()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/bin/python 
            python_version         : 3.9.18     
            machine                : x86_64     
            system                 : Linux      


    Gammapy package:

            version                : 1.2.dev2111+g5675db08b.d20240402 
            path                   : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy 


    Other packages:

            numpy                  : 1.26.4     
            scipy                  : 1.12.0     
            astropy                : 5.2.2      
            regions                : 0.8        
            click                  : 8.1.7      
            yaml                   : 6.0.1      
            IPython                : 8.18.1     
            jupyterlab             : not installed 
            matplotlib             : 3.8.3      
            pandas                 : not installed 
            healpy                 : 1.16.6     
            iminuit                : 2.25.2     
            sherpa                 : 4.16.0     
            naima                  : 0.10.0     
            emcee                  : 3.1.4      
            corner                 : 2.2.2      
            ray                    : 2.10.0     


    Gammapy environment variables:

            GAMMAPY_DATA           : ./gammapy-data 





.. GENERATED FROM PYTHON SOURCE LINES 61-69

A useful way to organize the relevant files are the index tables. The
observation index table contains information on each particular run,
such as the pointing, or the run ID. The HDU index table has a row per
relevant file (i.e., events, effective area, psfâ€¦) and contains the path
to said file. Together they can be loaded into a Datastore by indicating
the directory in which they can be found, in this case
`$GAMMAPY_DATA/hess-dl3-dr1`:


.. GENERATED FROM PYTHON SOURCE LINES 71-72

Create and get info on the data store

.. GENERATED FROM PYTHON SOURCE LINES 72-77

.. code-block:: Python


    data_store = DataStore.from_dir("$GAMMAPY_DATA/hess-dl3-dr1")

    data_store.info()



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/examples/tutorials/data/hess.py", line 73, in <module>
        data_store = DataStore.from_dir("$GAMMAPY_DATA/hess-dl3-dr1")
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/data/data_store.py", line 173, in from_dir
        raise OSError(f"File not found: {hdu_table_filename}")
    OSError: File not found: gammapy-data/hess-dl3-dr1/hdu-index.fits.gz




.. GENERATED FROM PYTHON SOURCE LINES 78-79

Preview an excerpt from the observation table

.. GENERATED FROM PYTHON SOURCE LINES 79-82

.. code-block:: Python


    display(data_store.obs_table[:2][["OBS_ID", "DATE-OBS", "RA_PNT", "DEC_PNT", "OBJECT"]])


.. GENERATED FROM PYTHON SOURCE LINES 83-84

Get a single observation

.. GENERATED FROM PYTHON SOURCE LINES 84-87

.. code-block:: Python


    obs = data_store.obs(23523)


.. GENERATED FROM PYTHON SOURCE LINES 88-89

Select and peek events

.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: Python


    obs.events.select_offset([0, 2.5] * u.deg).peek()


.. GENERATED FROM PYTHON SOURCE LINES 93-94

Peek the effective area

.. GENERATED FROM PYTHON SOURCE LINES 94-97

.. code-block:: Python


    obs.aeff.peek()


.. GENERATED FROM PYTHON SOURCE LINES 98-99

Peek the energy dispersion

.. GENERATED FROM PYTHON SOURCE LINES 99-102

.. code-block:: Python


    obs.edisp.peek()


.. GENERATED FROM PYTHON SOURCE LINES 103-104

Peek the psf

.. GENERATED FROM PYTHON SOURCE LINES 104-106

.. code-block:: Python

    obs.psf.peek()


.. GENERATED FROM PYTHON SOURCE LINES 107-108

Peek the background rate

.. GENERATED FROM PYTHON SOURCE LINES 108-111

.. code-block:: Python

    obs.bkg.to_2d().plot()
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 112-118

Theta squared event distribution
--------------------------------

As a quick look plot it can be helpful to plot the quadratic offset
(theta squared) distribution of the events.


.. GENERATED FROM PYTHON SOURCE LINES 118-133

.. code-block:: Python


    position = SkyCoord(ra=83.63, dec=22.01, unit="deg", frame="icrs")
    theta2_axis = MapAxis.from_bounds(0, 0.2, nbin=20, interp="lin", unit="deg2")

    observations = data_store.get_observations([23523, 23526])
    theta2_table = make_theta_squared_table(
        observations=observations,
        position=position,
        theta_squared_axis=theta2_axis,
    )

    plt.figure(figsize=(10, 5))
    plot_theta_squared_table(theta2_table)
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 134-142

Exercises
---------

-  Find the `OBS_ID` for the runs of the Crab nebula
-  Compute the expected number of background events in the whole RoI for
   `OBS_ID=23523` in the 1 TeV to 3 TeV energy band, from the
   background IRF.


.. GENERATED FROM PYTHON SOURCE LINES 145-152

Next steps
----------

Now you know how to access and work with H.E.S.S. data. All other
tutorials and documentation apply to H.E.S.S. and CTA or any other IACT
that provides DL3 data and IRFs in the standard format.



.. _sphx_glr_download_tutorials_data_hess.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/notebooks/dev/tutorials/data/hess.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: hess.ipynb <hess.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: hess.py <hess.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
