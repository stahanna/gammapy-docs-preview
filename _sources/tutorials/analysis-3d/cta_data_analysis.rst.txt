
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/analysis-3d/cta_data_analysis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_analysis-3d_cta_data_analysis.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_analysis-3d_cta_data_analysis.py:


Basic image exploration and fitting
===================================

Detect sources, produce a sky image and a spectrum using CTA-1DC data.

Introduction
------------

**This notebook shows an example how to make a sky image and spectrum
for simulated CTA data with Gammapy.**

The dataset we will use is three observation runs on the Galactic
Center. This is a tiny (and thus quick to process and play with and
learn) subset of the simulated CTA dataset that was produced for the
first data challenge in August 2017.

.. GENERATED FROM PYTHON SOURCE LINES 22-27

Setup
-----

As usual, we’ll start with some setup …


.. GENERATED FROM PYTHON SOURCE LINES 27-60

.. code-block:: Python


    # Configure the logger, so that the spectral analysis
    # isn't so chatty about what it's doing.
    import logging
    import numpy as np
    import astropy.units as u
    from astropy.coordinates import SkyCoord
    from regions import CircleSkyRegion
    import matplotlib.pyplot as plt
    from IPython.display import display
    from gammapy.data import DataStore
    from gammapy.datasets import Datasets, FluxPointsDataset, MapDataset, SpectrumDataset
    from gammapy.estimators import FluxPointsEstimator, TSMapEstimator
    from gammapy.estimators.utils import find_peaks
    from gammapy.makers import (
        MapDatasetMaker,
        ReflectedRegionsBackgroundMaker,
        SafeMaskMaker,
        SpectrumDatasetMaker,
    )
    from gammapy.maps import MapAxis, RegionGeom, WcsGeom
    from gammapy.modeling import Fit
    from gammapy.modeling.models import (
        GaussianSpatialModel,
        PowerLawSpectralModel,
        SkyModel,
    )
    from gammapy.visualization import plot_npred_signal, plot_spectrum_datasets_off_regions

    logging.basicConfig()
    log = logging.getLogger("gammapy.spectrum")
    log.setLevel(logging.ERROR)








.. GENERATED FROM PYTHON SOURCE LINES 61-63

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: Python

    from gammapy.utils.check import check_tutorials_setup

    check_tutorials_setup()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/bin/python 
            python_version         : 3.9.18     
            machine                : x86_64     
            system                 : Linux      


    Gammapy package:

            version                : 1.2.dev2051+gbdbe6fea3.d20240318 
            path                   : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/gammapy 


    Other packages:

            numpy                  : 1.26.4     
            scipy                  : 1.12.0     
            astropy                : 5.2.2      
            regions                : 0.8        
            click                  : 8.1.7      
            yaml                   : 6.0.1      
            IPython                : 8.18.1     
            jupyterlab             : not installed 
            matplotlib             : 3.8.3      
            pandas                 : not installed 
            healpy                 : 1.16.6     
            iminuit                : 2.25.2     
            sherpa                 : 4.16.0     
            naima                  : 0.10.0     
            emcee                  : 3.1.4      
            corner                 : 2.2.2      
            ray                    : 2.9.3      


    Gammapy environment variables:

            GAMMAPY_DATA           : ./gammapy-data 





.. GENERATED FROM PYTHON SOURCE LINES 69-78

Select observations
-------------------

A Gammapy analysis usually starts by creating a
`~gammapy.data.DataStore` and selecting observations.

This is shown in detail in other notebooks (see e.g. the :doc:`/tutorials/starting/analysis_2` tutorial),
here we choose three observations near the Galactic Center.


.. GENERATED FROM PYTHON SOURCE LINES 78-98

.. code-block:: Python


    data_store = DataStore.from_dir("$GAMMAPY_DATA/cta-1dc/index/gps")

    # Just as a reminder: this is how to select observations
    # from astropy.coordinates import SkyCoord
    # table = data_store.obs_table
    # pos_obs = SkyCoord(table['GLON_PNT'], table['GLAT_PNT'], frame='galactic', unit='deg')
    # pos_target = SkyCoord(0, 0, frame='galactic', unit='deg')
    # offset = pos_target.separation(pos_obs).deg
    # mask = (1 < offset) & (offset < 2)
    # table = table[mask]
    # table.show_in_browser(jsviewer=True)

    obs_id = [110380, 111140, 111159]
    observations = data_store.get_observations(obs_id)

    obs_cols = ["OBS_ID", "GLON_PNT", "GLAT_PNT", "LIVETIME"]
    display(data_store.obs_table.select_obs_id(obs_id)[obs_cols])




.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/examples/tutorials/analysis-3d/cta_data_analysis.py", line 79, in <module>
        data_store = DataStore.from_dir("$GAMMAPY_DATA/cta-1dc/index/gps")
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/gammapy/data/data_store.py", line 173, in from_dir
        raise OSError(f"File not found: {hdu_table_filename}")
    OSError: File not found: gammapy-data/cta-1dc/index/gps/hdu-index.fits.gz




.. GENERATED FROM PYTHON SOURCE LINES 99-108

Make sky images
---------------

Define map geometry
~~~~~~~~~~~~~~~~~~~

Select the target position and define an ON region for the spectral
analysis


.. GENERATED FROM PYTHON SOURCE LINES 108-129

.. code-block:: Python


    axis = MapAxis.from_energy_bounds(
        0.1,
        10,
        nbin=10,
        unit="TeV",
        name="energy",
    )
    axis_true = MapAxis.from_energy_bounds(
        0.05,
        20,
        nbin=20,
        name="energy_true",
        unit="TeV",
    )
    geom = WcsGeom.create(
        skydir=(0, 0), npix=(500, 400), binsz=0.02, frame="galactic", axes=[axis]
    )
    print(geom)



.. GENERATED FROM PYTHON SOURCE LINES 130-133

Compute images
~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 135-153

.. code-block:: Python

    stacked = MapDataset.create(geom=geom, energy_axis_true=axis_true)
    maker = MapDatasetMaker(selection=["counts", "background", "exposure", "psf"])
    maker_safe_mask = SafeMaskMaker(methods=["offset-max"], offset_max=2.5 * u.deg)

    for obs in observations:
        cutout = stacked.cutout(obs.get_pointing_icrs(obs.tmid), width="5 deg")
        dataset = maker.run(cutout, obs)
        dataset = maker_safe_mask.run(dataset, obs)
        stacked.stack(dataset)

    #
    # The maps are cubes, with an energy axis.
    # Let's also make some images:
    #

    dataset_image = stacked.to_image()
    geom_image = dataset_image.geoms["geom"]


.. GENERATED FROM PYTHON SOURCE LINES 154-159

Show images
~~~~~~~~~~~

Let’s have a quick look at the images we computed …


.. GENERATED FROM PYTHON SOURCE LINES 159-178

.. code-block:: Python


    fig, (ax1, ax2, ax3) = plt.subplots(
        figsize=(15, 5),
        ncols=3,
        subplot_kw={"projection": geom_image.wcs},
        gridspec_kw={"left": 0.1, "right": 0.9},
    )

    ax1.set_title("Counts map")
    dataset_image.counts.smooth(2).plot(ax=ax1, vmax=5)

    ax2.set_title("Background map")
    dataset_image.background.plot(ax=ax2, vmax=5)

    ax3.set_title("Excess map")
    dataset_image.excess.smooth(3).plot(ax=ax3, vmax=2)
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 179-186

Source Detection
----------------

Use the class `~gammapy.estimators.TSMapEstimator` and function
`~gammapy.estimators.utils.find_peaks` to detect sources on the images.
We search for 0.1 deg sigma gaussian sources in the dataset.


.. GENERATED FROM PYTHON SOURCE LINES 186-200

.. code-block:: Python


    spatial_model = GaussianSpatialModel(sigma="0.05 deg")
    spectral_model = PowerLawSpectralModel(index=2)
    model = SkyModel(spatial_model=spatial_model, spectral_model=spectral_model)

    ts_image_estimator = TSMapEstimator(
        model,
        kernel_width="0.5 deg",
        selection_optional=[],
        downsampling_factor=2,
        sum_over_energy_groups=False,
        energy_edges=[0.1, 10] * u.TeV,
    )


.. GENERATED FROM PYTHON SOURCE LINES 201-210

.. code-block:: Python

    images_ts = ts_image_estimator.run(stacked)

    sources = find_peaks(
        images_ts["sqrt_ts"],
        threshold=5,
        min_distance="0.2 deg",
    )
    display(sources)


.. GENERATED FROM PYTHON SOURCE LINES 211-213

To get the position of the sources, simply


.. GENERATED FROM PYTHON SOURCE LINES 213-216

.. code-block:: Python

    source_pos = SkyCoord(sources["ra"], sources["dec"])
    print(source_pos)


.. GENERATED FROM PYTHON SOURCE LINES 217-219

Plot sources on top of significance sky image


.. GENERATED FROM PYTHON SOURCE LINES 219-235

.. code-block:: Python

    fig, ax = plt.subplots(figsize=(8, 6), subplot_kw={"projection": geom_image.wcs})
    images_ts["sqrt_ts"].plot(ax=ax, add_cbar=True)

    ax.scatter(
        source_pos.ra.deg,
        source_pos.dec.deg,
        transform=ax.get_transform("icrs"),
        color="none",
        edgecolor="white",
        marker="o",
        s=200,
        lw=1.5,
    )
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 236-241

Spatial analysis
----------------

See other notebooks for how to run a 3D cube or 2D image based analysis.


.. GENERATED FROM PYTHON SOURCE LINES 244-251

Spectrum
--------

We’ll run a spectral analysis using the classical reflected regions
background estimation method, and using the on-off (often called WSTAT)
likelihood function.


.. GENERATED FROM PYTHON SOURCE LINES 251-260

.. code-block:: Python


    target_position = SkyCoord(0, 0, unit="deg", frame="galactic")
    on_radius = 0.2 * u.deg
    on_region = CircleSkyRegion(center=target_position, radius=on_radius)

    exclusion_mask = ~geom.to_image().region_mask([on_region])
    exclusion_mask.plot()
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 261-262

Configure spectral analysis

.. GENERATED FROM PYTHON SOURCE LINES 262-277

.. code-block:: Python


    energy_axis = MapAxis.from_energy_bounds(0.1, 40, 40, unit="TeV", name="energy")
    energy_axis_true = MapAxis.from_energy_bounds(
        0.05, 100, 200, unit="TeV", name="energy_true"
    )

    geom = RegionGeom.create(region=on_region, axes=[energy_axis])
    dataset_empty = SpectrumDataset.create(geom=geom, energy_axis_true=energy_axis_true)

    dataset_maker = SpectrumDatasetMaker(
        containment_correction=False, selection=["counts", "exposure", "edisp"]
    )
    bkg_maker = ReflectedRegionsBackgroundMaker(exclusion_mask=exclusion_mask)
    safe_mask_masker = SafeMaskMaker(methods=["aeff-max"], aeff_percent=10)


.. GENERATED FROM PYTHON SOURCE LINES 278-279

Run data reduction

.. GENERATED FROM PYTHON SOURCE LINES 281-291

.. code-block:: Python

    datasets = Datasets()

    for observation in observations:
        dataset = dataset_maker.run(
            dataset_empty.copy(name=f"obs-{observation.obs_id}"), observation
        )
        dataset_on_off = bkg_maker.run(dataset, observation)
        dataset_on_off = safe_mask_masker.run(dataset_on_off, observation)
        datasets.append(dataset_on_off)


.. GENERATED FROM PYTHON SOURCE LINES 292-293

Plot results

.. GENERATED FROM PYTHON SOURCE LINES 293-302

.. code-block:: Python


    plt.figure(figsize=(8, 6))
    ax = dataset_image.counts.smooth("0.03 deg").plot(vmax=8)

    on_region.to_pixel(ax.wcs).plot(ax=ax, edgecolor="white")
    plot_spectrum_datasets_off_regions(datasets, ax=ax)
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 303-309

Model fit
~~~~~~~~~

The next step is to fit a spectral model, using all data (i.e. a
“global” fit, using all energies).


.. GENERATED FROM PYTHON SOURCE LINES 311-324

.. code-block:: Python

    spectral_model = PowerLawSpectralModel(
        index=2, amplitude=1e-11 * u.Unit("cm-2 s-1 TeV-1"), reference=1 * u.TeV
    )

    model = SkyModel(spectral_model=spectral_model, name="source-gc")

    datasets.models = model

    fit = Fit()
    result = fit.run(datasets=datasets)
    print(result)



.. GENERATED FROM PYTHON SOURCE LINES 325-331

Here we can plot the predicted number of counts for each model and
for the background in the dataset. This is especially useful when
studying complex field with a lot a sources. There is a function
in the visualization sub-package of gammapy that does this automatically.

First we need to stack our datasets.

.. GENERATED FROM PYTHON SOURCE LINES 331-339

.. code-block:: Python



    stacked_dataset = datasets.stack_reduce(name="stacked")
    stacked_dataset.models = model

    print(stacked_dataset)



.. GENERATED FROM PYTHON SOURCE LINES 340-342

Call `~gammapy.visualization.plot_npred_signal` to plot the predicted counts.


.. GENERATED FROM PYTHON SOURCE LINES 342-348

.. code-block:: Python



    plot_npred_signal(stacked_dataset)
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 349-356

Spectral points
~~~~~~~~~~~~~~~

Finally, let’s compute spectral points. The method used is to first
choose an energy binning, and then to do a 1-dim likelihood fit /
profile to compute the flux and flux error.


.. GENERATED FROM PYTHON SOURCE LINES 356-366

.. code-block:: Python



    # Flux points are computed on stacked datasets
    energy_edges = MapAxis.from_energy_bounds("1 TeV", "30 TeV", nbin=5).edges

    fpe = FluxPointsEstimator(energy_edges=energy_edges, source="source-gc")
    flux_points = fpe.run(datasets=[stacked_dataset])
    flux_points.to_table(sed_type="dnde", formatted=True)



.. GENERATED FROM PYTHON SOURCE LINES 367-374

Plot
~~~~

Let’s plot the spectral model and points. You could do it directly, but
for convenience we bundle the model and the flux points in a
`~gammapy.datasets.FluxPointsDataset`:


.. GENERATED FROM PYTHON SOURCE LINES 374-380

.. code-block:: Python


    flux_points_dataset = FluxPointsDataset(data=flux_points, models=model)
    flux_points_dataset.plot_fit()
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 381-397

Exercises
---------

-  Re-run the analysis above, varying some analysis parameters, e.g.

   -  Select a few other observations
   -  Change the energy band for the map
   -  Change the spectral model for the fit
   -  Change the energy binning for the spectral points

-  Change the target. Make a sky image and spectrum for your favourite
   source.

   -  If you don’t know any, the Crab nebula is the “hello world!”
      analysis of gamma-ray astronomy.


.. GENERATED FROM PYTHON SOURCE LINES 397-402

.. code-block:: Python


    # print('hello world')
    # SkyCoord.from_name('crab')



.. GENERATED FROM PYTHON SOURCE LINES 403-410

What next?
----------

-  This notebook showed an example of a first CTA analysis with Gammapy,
   using simulated 1DC data.
-  Let us know if you have any questions or issues!



.. _sphx_glr_download_tutorials_analysis-3d_cta_data_analysis.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/notebooks/dev/tutorials/analysis-3d/cta_data_analysis.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: cta_data_analysis.ipynb <cta_data_analysis.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: cta_data_analysis.py <cta_data_analysis.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
