
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/analysis-3d/flux_profiles.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_analysis-3d_flux_profiles.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_analysis-3d_flux_profiles.py:


Flux Profile Estimation
=======================

Learn how to estimate flux profiles on a Fermi-LAT dataset.

Prerequisites
-------------

Knowledge of 3D data reduction and datasets used in Gammapy, see for
instance the first analysis tutorial.

Context
-------

A useful tool to study and compare the spatial distribution of flux in
images and data cubes is the measurement of flux profiles. Flux profiles
can show spatial correlations of gamma-ray data with e.g. gas maps or
other type of gamma-ray data. Most commonly flux profiles are measured
along some preferred coordinate axis, either radially distance from a
source of interest, along longitude and latitude coordinate axes or
along the path defined by two spatial coordinates.

Proposed Approach
-----------------

Flux profile estimation essentially works by estimating flux points for
a set of predefined spatially connected regions. For radial flux
profiles the shape of the regions are annuli with a common center, for
linear profiles itâ€™s typically a rectangular shape.

We will work on a pre-computed `~gammapy.datasets.MapDataset` of Fermi-LAT data, use
`~regions.SkyRegion` to define the structure of the bins of the flux profile and
run the flux profile extraction using the `~gammapy.estimators.FluxProfileEstimator`

.. GENERATED FROM PYTHON SOURCE LINES 37-45

.. code-block:: Python


    import numpy as np
    from astropy import units as u
    from astropy.coordinates import SkyCoord

    # %matplotlib inline
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 46-49

Setup
-----


.. GENERATED FROM PYTHON SOURCE LINES 49-55

.. code-block:: Python

    from IPython.display import display
    from gammapy.datasets import MapDataset
    from gammapy.estimators import FluxPoints, FluxProfileEstimator
    from gammapy.maps import RegionGeom
    from gammapy.modeling.models import PowerLawSpectralModel








.. GENERATED FROM PYTHON SOURCE LINES 56-58

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 58-67

.. code-block:: Python

    from gammapy.utils.check import check_tutorials_setup
    from gammapy.utils.regions import (
        make_concentric_annulus_sky_regions,
        make_orthogonal_rectangle_sky_regions,
    )

    check_tutorials_setup()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/bin/python 
            python_version         : 3.9.18     
            machine                : x86_64     
            system                 : Linux      


    Gammapy package:

            version                : 1.2.dev2111+g5675db08b.d20240402 
            path                   : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy 


    Other packages:

            numpy                  : 1.26.4     
            scipy                  : 1.12.0     
            astropy                : 5.2.2      
            regions                : 0.8        
            click                  : 8.1.7      
            yaml                   : 6.0.1      
            IPython                : 8.18.1     
            jupyterlab             : not installed 
            matplotlib             : 3.8.3      
            pandas                 : not installed 
            healpy                 : 1.16.6     
            iminuit                : 2.25.2     
            sherpa                 : 4.16.0     
            naima                  : 0.10.0     
            emcee                  : 3.1.4      
            corner                 : 2.2.2      
            ray                    : 2.10.0     


    Gammapy environment variables:

            GAMMAPY_DATA           : ./gammapy-data 





.. GENERATED FROM PYTHON SOURCE LINES 68-71

Read and Introduce Data
-----------------------


.. GENERATED FROM PYTHON SOURCE LINES 71-77

.. code-block:: Python


    dataset = MapDataset.read(
        "$GAMMAPY_DATA/fermi-3fhl-gc/fermi-3fhl-gc.fits.gz", name="fermi-dataset"
    )




.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/examples/tutorials/analysis-3d/flux_profiles.py", line 72, in <module>
        dataset = MapDataset.read(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/datasets/map.py", line 1556, in read
        with fits.open(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/io/fits/hdu/hdulist.py", line 214, in fitsopen
        return HDUList.fromfile(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/io/fits/hdu/hdulist.py", line 482, in fromfile
        return cls._readfrom(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/io/fits/hdu/hdulist.py", line 1170, in _readfrom
        fileobj = _File(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/io/fits/file.py", line 218, in __init__
        self._open_filename(fileobj, mode, overwrite)
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/io/fits/file.py", line 636, in _open_filename
        self._file = open(self.name, IO_FITS_MODES[mode])
    FileNotFoundError: [Errno 2] Aucun fichier ou dossier de ce type: 'gammapy-data/fermi-3fhl-gc/fermi-3fhl-gc.fits.gz'




.. GENERATED FROM PYTHON SOURCE LINES 78-80

This is what the counts image we will work with looks like:


.. GENERATED FROM PYTHON SOURCE LINES 80-85

.. code-block:: Python

    counts_image = dataset.counts.sum_over_axes()
    counts_image.smooth("0.1 deg").plot(stretch="sqrt")
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 86-89

There are 400x200 pixels in the dataset and 11 energy bins between 10
GeV and 2 TeV:


.. GENERATED FROM PYTHON SOURCE LINES 89-93

.. code-block:: Python


    print(dataset.counts)



.. GENERATED FROM PYTHON SOURCE LINES 94-108

Profile Estimation
------------------

Configuration
~~~~~~~~~~~~~

We start by defining a list of spatially connected regions along the
galactic longitude axis. For this there is a helper function
`~gammapy.utils.regions.make_orthogonal_rectangle_sky_regions`. The individual region bins
for the profile have a height of 3 deg and in total there are 31 bins.
Its starts from lon = 10 deg and goes to lon = 350 deg. In addition, we
have to specify the `wcs` to take into account possible projections
effects on the region definition:


.. GENERATED FROM PYTHON SOURCE LINES 108-118

.. code-block:: Python


    regions = make_orthogonal_rectangle_sky_regions(
        start_pos=SkyCoord("10d", "0d", frame="galactic"),
        end_pos=SkyCoord("350d", "0d", frame="galactic"),
        wcs=counts_image.geom.wcs,
        height="3 deg",
        nbin=51,
    )



.. GENERATED FROM PYTHON SOURCE LINES 119-122

We can use the `~gammapy.maps.RegionGeom` object to illustrate the regions on top of
the counts image:


.. GENERATED FROM PYTHON SOURCE LINES 122-129

.. code-block:: Python


    geom = RegionGeom.create(region=regions)
    ax = counts_image.smooth("0.1 deg").plot(stretch="sqrt")
    geom.plot_region(ax=ax, color="w")
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 130-134

Next we create the `~gammapy.estimators.FluxProfileEstimator`. For the estimation of the
flux profile we assume a spectral model with a power-law shape and an
index of 2.3


.. GENERATED FROM PYTHON SOURCE LINES 134-143

.. code-block:: Python


    flux_profile_estimator = FluxProfileEstimator(
        regions=regions,
        spectrum=PowerLawSpectralModel(index=2.3),
        energy_edges=[10, 2000] * u.GeV,
        selection_optional=["ul"],
    )



.. GENERATED FROM PYTHON SOURCE LINES 144-146

We can see the full configuration by printing the estimator object:


.. GENERATED FROM PYTHON SOURCE LINES 146-150

.. code-block:: Python


    print(flux_profile_estimator)



.. GENERATED FROM PYTHON SOURCE LINES 151-156

Run Estimation
~~~~~~~~~~~~~~

Now we can run the profile estimation and explore the results:


.. GENERATED FROM PYTHON SOURCE LINES 158-163

.. code-block:: Python

    profile = flux_profile_estimator.run(datasets=dataset)

    print(profile)



.. GENERATED FROM PYTHON SOURCE LINES 164-173

We can see the flux profile is represented by a `~gammapy.estimators.FluxPoints` object
with a `projected-distance` axis, which defines the main axis the flux
profile is measured along. The `lon` and `lat` axes can be ignored.

Plotting Results
~~~~~~~~~~~~~~~~

Let us directly plot the result using `~gammapy.estimators.FluxPoints.plot`:


.. GENERATED FROM PYTHON SOURCE LINES 173-178

.. code-block:: Python

    ax = profile.plot(sed_type="dnde")
    ax.set_yscale("linear")
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 179-183

Based on the spectral model we specified above we can also plot in any
other sed type, e.g. energy flux and define a different threshold when
to plot upper limits:


.. GENERATED FROM PYTHON SOURCE LINES 183-192

.. code-block:: Python


    profile.sqrt_ts_threshold_ul = 2

    plt.figure()
    ax = profile.plot(sed_type="eflux")
    ax.set_yscale("linear")
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 193-197

We can also plot any other quantity of interest, that is defined on the
`~gammapy.estimators.FluxPoints` result object. E.g. the predicted total counts,
background counts and excess counts:


.. GENERATED FROM PYTHON SOURCE LINES 197-209

.. code-block:: Python


    quantities = ["npred", "npred_excess", "npred_background"]

    fig, ax = plt.subplots()

    for quantity in quantities:
        profile[quantity].plot(ax=ax, label=quantity.title())

    ax.set_ylabel("Counts")
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 210-216

Serialisation and I/O
~~~~~~~~~~~~~~~~~~~~~

The profile can be serialised using `~gammapy.estimators.FluxPoints.write`, given a
specific format:


.. GENERATED FROM PYTHON SOURCE LINES 216-231

.. code-block:: Python


    profile.write(
        filename="flux_profile_fermi.fits",
        format="profile",
        overwrite=True,
        sed_type="dnde",
    )

    profile_new = FluxPoints.read(filename="flux_profile_fermi.fits", format="profile")

    ax = profile_new.plot()
    ax.set_yscale("linear")
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 232-235

The profile can be serialised to a `~astropy.table.Table` object
using:


.. GENERATED FROM PYTHON SOURCE LINES 235-240

.. code-block:: Python


    table = profile.to_table(format="profile", formatted=True)
    display(table)



.. GENERATED FROM PYTHON SOURCE LINES 241-244

No we can also estimate a radial profile starting from the Galactic
center:


.. GENERATED FROM PYTHON SOURCE LINES 244-252

.. code-block:: Python


    regions = make_concentric_annulus_sky_regions(
        center=SkyCoord("0d", "0d", frame="galactic"),
        radius_max="1.5 deg",
        nbin=11,
    )



.. GENERATED FROM PYTHON SOURCE LINES 253-255

Again we first illustrate the regions:


.. GENERATED FROM PYTHON SOURCE LINES 255-264

.. code-block:: Python

    geom = RegionGeom.create(region=regions)
    gc_image = counts_image.cutout(
        position=SkyCoord("0d", "0d", frame="galactic"), width=3 * u.deg
    )
    ax = gc_image.smooth("0.1 deg").plot(stretch="sqrt")
    geom.plot_region(ax=ax, color="w")
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 265-267

This time we define two energy bins and include the fit statistic
profile in the computation:

.. GENERATED FROM PYTHON SOURCE LINES 267-274

.. code-block:: Python


    flux_profile_estimator = FluxProfileEstimator(
        regions=regions,
        spectrum=PowerLawSpectralModel(index=2.3),
        energy_edges=[10, 100, 2000] * u.GeV,
        selection_optional=["ul", "scan"],
    )

.. GENERATED FROM PYTHON SOURCE LINES 275-276

The configuration of the fit statistic profile is done throught the norm parameter:

.. GENERATED FROM PYTHON SOURCE LINES 276-278

.. code-block:: Python

    flux_profile_estimator.norm.scan_values = np.linspace(-1, 5, 11)


.. GENERATED FROM PYTHON SOURCE LINES 279-280

Now we can run the estimator,

.. GENERATED FROM PYTHON SOURCE LINES 280-284

.. code-block:: Python


    profile = flux_profile_estimator.run(datasets=dataset)



.. GENERATED FROM PYTHON SOURCE LINES 285-287

and plot the result:


.. GENERATED FROM PYTHON SOURCE LINES 287-292

.. code-block:: Python


    profile.plot(axis_name="projected-distance", sed_type="flux")
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 293-296

However because of the powerlaw spectrum the flux at high energies is
much lower. To extract the profile at high energies only we can use:


.. GENERATED FROM PYTHON SOURCE LINES 296-301

.. code-block:: Python


    profile_high = profile.slice_by_idx({"energy": slice(1, 2)})
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 302-304

And now plot the points together with the likelihood profiles:


.. GENERATED FROM PYTHON SOURCE LINES 304-312

.. code-block:: Python


    fig, ax = plt.subplots()
    profile_high.plot(ax=ax, sed_type="eflux", color="tab:orange")
    profile_high.plot_ts_profiles(ax=ax, sed_type="eflux")
    ax.set_yscale("linear")
    plt.show()

    # sphinx_gallery_thumbnail_number = 2


.. _sphx_glr_download_tutorials_analysis-3d_flux_profiles.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/notebooks/dev/tutorials/analysis-3d/flux_profiles.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: flux_profiles.ipynb <flux_profiles.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: flux_profiles.py <flux_profiles.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
