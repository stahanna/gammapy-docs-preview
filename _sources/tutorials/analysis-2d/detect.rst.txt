
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/analysis-2d/detect.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_analysis-2d_detect.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_analysis-2d_detect.py:


Source detection and significance maps
======================================

Build a list of significant excesses in a Fermi-LAT map.

Context
-------

The first task in a source catalog production is to identify
significant excesses in the data that can be associated to unknown
sources and provide a preliminary parametrization in terms of position,
extent, and flux. In this notebook we will use Fermi-LAT data to
illustrate how to detect candidate sources in counts images with known
background.

**Objective: build a list of significant excesses in a Fermi-LAT map**

Proposed approach
-----------------

This notebook show how to do source detection with Gammapy using the
methods available in `~gammapy.estimators`. We will use images from a
Fermi-LAT 3FHL high-energy Galactic center dataset to do this:

-  perform adaptive smoothing on counts image
-  produce 2-dimensional test-statistics (TS)
-  run a peak finder to detect point-source candidates
-  compute Li & Ma significance images
-  estimate source candidates radius and excess counts

Note that what we do here is a quick-look analysis, the production of
real source catalogs use more elaborate procedures.

We will work with the following functions and classes:

-  `~gammapy.maps.WcsNDMap`
-  `~gammapy.estimators.ASmoothMapEstimator`
-  `~gammapy.estimators.TSMapEstimator`
-  `~gammapy.estimators.utils.find_peaks`

.. GENERATED FROM PYTHON SOURCE LINES 45-50

Setup
-----

As always, let’s get started with some setup …


.. GENERATED FROM PYTHON SOURCE LINES 50-64

.. code-block:: Python


    import numpy as np
    import astropy.units as u

    # %matplotlib inline
    import matplotlib.pyplot as plt
    from IPython.display import display
    from gammapy.datasets import MapDataset
    from gammapy.estimators import ASmoothMapEstimator, TSMapEstimator
    from gammapy.estimators.utils import find_peaks, find_peaks_in_flux_map
    from gammapy.irf import EDispKernelMap, PSFMap
    from gammapy.maps import Map
    from gammapy.modeling.models import PointSpatialModel, PowerLawSpectralModel, SkyModel








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 67-72

.. code-block:: Python

    from gammapy.utils.check import check_tutorials_setup

    check_tutorials_setup()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/bin/python 
            python_version         : 3.9.18     
            machine                : x86_64     
            system                 : Linux      


    Gammapy package:

            version                : 1.2.dev2111+g5675db08b.d20240402 
            path                   : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy 


    Other packages:

            numpy                  : 1.26.4     
            scipy                  : 1.12.0     
            astropy                : 5.2.2      
            regions                : 0.8        
            click                  : 8.1.7      
            yaml                   : 6.0.1      
            IPython                : 8.18.1     
            jupyterlab             : not installed 
            matplotlib             : 3.8.3      
            pandas                 : not installed 
            healpy                 : 1.16.6     
            iminuit                : 2.25.2     
            sherpa                 : 4.16.0     
            naima                  : 0.10.0     
            emcee                  : 3.1.4      
            corner                 : 2.2.2      
            ray                    : 2.10.0     


    Gammapy environment variables:

            GAMMAPY_DATA           : ./gammapy-data 





.. GENERATED FROM PYTHON SOURCE LINES 73-78

Read in input images
--------------------

We first read the relevant maps:


.. GENERATED FROM PYTHON SOURCE LINES 78-106

.. code-block:: Python


    counts = Map.read("$GAMMAPY_DATA/fermi-3fhl-gc/fermi-3fhl-gc-counts-cube.fits.gz")
    background = Map.read(
        "$GAMMAPY_DATA/fermi-3fhl-gc/fermi-3fhl-gc-background-cube.fits.gz"
    )

    exposure = Map.read("$GAMMAPY_DATA/fermi-3fhl-gc/fermi-3fhl-gc-exposure-cube.fits.gz")

    psfmap = PSFMap.read(
        "$GAMMAPY_DATA/fermi-3fhl-gc/fermi-3fhl-gc-psf-cube.fits.gz",
        format="gtpsf",
    )

    edisp = EDispKernelMap.from_diagonal_response(
        energy_axis=counts.geom.axes["energy"],
        energy_axis_true=exposure.geom.axes["energy_true"],
    )

    dataset = MapDataset(
        counts=counts,
        background=background,
        exposure=exposure,
        psf=psfmap,
        name="fermi-3fhl-gc",
        edisp=edisp,
    )




.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/examples/tutorials/analysis-2d/detect.py", line 79, in <module>
        counts = Map.read("$GAMMAPY_DATA/fermi-3fhl-gc/fermi-3fhl-gc-counts-cube.fits.gz")
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/maps/core.py", line 254, in read
        with fits.open(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/io/fits/hdu/hdulist.py", line 214, in fitsopen
        return HDUList.fromfile(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/io/fits/hdu/hdulist.py", line 482, in fromfile
        return cls._readfrom(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/io/fits/hdu/hdulist.py", line 1170, in _readfrom
        fileobj = _File(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/io/fits/file.py", line 218, in __init__
        self._open_filename(fileobj, mode, overwrite)
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/io/fits/file.py", line 636, in _open_filename
        self._file = open(self.name, IO_FITS_MODES[mode])
    FileNotFoundError: [Errno 2] Aucun fichier ou dossier de ce type: 'gammapy-data/fermi-3fhl-gc/fermi-3fhl-gc-counts-cube.fits.gz'




.. GENERATED FROM PYTHON SOURCE LINES 107-118

Adaptive smoothing
------------------

For visualisation purpose it can be nice to look at a smoothed counts
image. This can be performed using the adaptive smoothing algorithm from
`Ebeling et
al. (2006) <https://ui.adsabs.harvard.edu/abs/2006MNRAS.368...65E/abstract>`__.

In the following example the `ASmoothMapEstimator.threshold` argument gives the minimum
significance expected, values below are clipped.


.. GENERATED FROM PYTHON SOURCE LINES 120-129

.. code-block:: Python

    scales = u.Quantity(np.arange(0.05, 1, 0.05), unit="deg")
    smooth = ASmoothMapEstimator(threshold=3, scales=scales, energy_edges=[10, 500] * u.GeV)
    images = smooth.run(dataset)

    plt.figure(figsize=(9, 5))
    images["flux"].plot(add_cbar=True, stretch="asinh")
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 130-146

TS map estimation
-----------------

The Test Statistic, TS = 2 ∆ log L (`Mattox et
al. 1996 <https://ui.adsabs.harvard.edu/abs/1996ApJ...461..396M/abstract>`__),
compares the likelihood function L optimized with and without a given
source. The TS map is computed by fitting by a single amplitude
parameter on each pixel as described in Appendix A of `Stewart
(2009) <https://ui.adsabs.harvard.edu/abs/2009A%26A...495..989S/abstract>`__.
The fit is simplified by finding roots of the derivative of the fit
statistics (default settings use `Brent’s
method <https://en.wikipedia.org/wiki/Brent%27s_method>`__).

We first need to define the model that will be used to test for the
existence of a source. Here, we use a point source.


.. GENERATED FROM PYTHON SOURCE LINES 146-153

.. code-block:: Python


    spatial_model = PointSpatialModel()

    # We choose units consistent with the map units here...
    spectral_model = PowerLawSpectralModel(amplitude="1e-22 cm-2 s-1 keV-1", index=2)
    model = SkyModel(spatial_model=spatial_model, spectral_model=spectral_model)


.. GENERATED FROM PYTHON SOURCE LINES 154-162

.. code-block:: Python

    estimator = TSMapEstimator(
        model,
        kernel_width="1 deg",
        energy_edges=[10, 500] * u.GeV,
    )
    maps = estimator.run(dataset)



.. GENERATED FROM PYTHON SOURCE LINES 163-166

Plot resulting images
~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: Python


    fig, (ax1, ax2, ax3) = plt.subplots(
        ncols=3,
        figsize=(20, 3),
        subplot_kw={"projection": counts.geom.wcs},
        gridspec_kw={"left": 0.1, "right": 0.98},
    )

    maps["sqrt_ts"].plot(ax=ax1, add_cbar=True)
    ax1.set_title("Significance map")
    maps["flux"].plot(ax=ax2, add_cbar=True, stretch="sqrt", vmin=0)
    ax2.set_title("Flux map")
    maps["niter"].plot(ax=ax3, add_cbar=True)
    ax3.set_title("Iteration map")
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 183-192

Source candidates
-----------------

Let’s run a peak finder on the `sqrt_ts` image to get a list of
point-sources candidates (positions and peak `sqrt_ts` values). The
`~gammapy.estimators.utils.find_peaks` function performs a local maximum search in a sliding
window, the argument `min_distance` is the minimum pixel distance
between peaks (smallest possible value and default is 1 pixel).


.. GENERATED FROM PYTHON SOURCE LINES 192-216

.. code-block:: Python


    sources = find_peaks(maps["sqrt_ts"], threshold=5, min_distance="0.25 deg")
    nsou = len(sources)
    display(sources)

    # Plot sources on top of significance sky image
    plt.figure(figsize=(9, 5))
    ax = maps["sqrt_ts"].plot(add_cbar=True)

    ax.scatter(
        sources["ra"],
        sources["dec"],
        transform=ax.get_transform("icrs"),
        color="none",
        edgecolor="w",
        marker="o",
        s=600,
        lw=1.5,
    )
    plt.show()

    # sphinx_gallery_thumbnail_number = 3



.. GENERATED FROM PYTHON SOURCE LINES 217-219

We can also utilise `~gammapy.estimators.utils.find_peaks_in_flux_map`
to display various parameters from the FluxMaps

.. GENERATED FROM PYTHON SOURCE LINES 219-224

.. code-block:: Python


    sources_flux_map = find_peaks_in_flux_map(maps, threshold=5, min_distance="0.25 deg")
    display(sources_flux_map)



.. GENERATED FROM PYTHON SOURCE LINES 225-232

Note that we used the instrument point-spread-function (PSF) as kernel,
so the hypothesis we test is the presence of a point source. In order to
test for extended sources we would have to use as kernel an extended
template convolved by the PSF. Alternatively, we can compute the
significance of an extended excess using the Li & Ma formalism, which is
faster as no fitting is involve.


.. GENERATED FROM PYTHON SOURCE LINES 235-256

What next?
----------

In this notebook, we have seen how to work with images and compute TS
and significance images from counts data, if a background estimate is
already available.

Here’s some suggestions what to do next:

-  Look how background estimation is performed for IACTs with and
   without the high level interface in
   :doc:`/tutorials/starting/analysis_1` and
   :doc:`/tutorials/starting/analysis_2` notebooks,
   respectively
-  Learn about 2D model fitting in the :doc:`/tutorials/analysis-2d/modeling_2D` notebook
-  Find more about Fermi-LAT data analysis in the
   :doc:`/tutorials/data/fermi_lat` notebook
-  Use source candidates to build a model and perform a 3D fitting (see
   :doc:`/tutorials/analysis-3d/analysis_3d`,
   :doc:`/tutorials/analysis-3d/analysis_mwl` notebooks for some hints)



.. _sphx_glr_download_tutorials_analysis-2d_detect.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/notebooks/dev/tutorials/analysis-2d/detect.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: detect.ipynb <detect.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: detect.py <detect.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
