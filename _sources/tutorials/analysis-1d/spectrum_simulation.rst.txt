
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/analysis-1d/spectrum_simulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_analysis-1d_spectrum_simulation.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_analysis-1d_spectrum_simulation.py:


1D spectrum simulation
======================

Simulate a number of spectral on-off observations of a source with a power-law spectral
model using the CTA 1DC response and fit them with the assumed spectral model.

Prerequisites
-------------

-  Knowledge of spectral extraction and datasets used in gammapy, see
   for instance the :doc:`spectral analysis
   tutorial </tutorials/analysis-1d/spectral_analysis>`

Context
-------

To simulate a specific observation, it is not always necessary to
simulate the full photon list. For many uses cases, simulating directly
a reduced binned dataset is enough: the IRFs reduced in the correct
geometry are combined with a source model to predict an actual number of
counts per bin. The latter is then used to simulate a reduced dataset
using Poisson probability distribution.

This can be done to check the feasibility of a measurement, to test
whether fitted parameters really provide a good fit to the data etc.

Here we will see how to perform a 1D spectral simulation of a CTA
observation, in particular, we will generate OFF observations following
the template background stored in the CTA IRFs.

**Objective: simulate a number of spectral ON-OFF observations of a
source with a power-law spectral model with CTA using the CTA 1DC
response, fit them with the assumed spectral model and check that the
distribution of fitted parameters is consistent with the input values.**

Proposed approach
-----------------

We will use the following classes and functions:

-  `~gammapy.datasets.SpectrumDatasetOnOff`
-  `~gammapy.datasets.SpectrumDataset`
-  `~gammapy.irf.load_irf_dict_from_file`
-  `~gammapy.modeling.models.PowerLawSpectralModel`

.. GENERATED FROM PYTHON SOURCE LINES 48-58

.. code-block:: Python



    import numpy as np
    import astropy.units as u
    from astropy.coordinates import Angle, SkyCoord
    from regions import CircleSkyRegion

    # %matplotlib inline
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 59-62

Setup
-----


.. GENERATED FROM PYTHON SOURCE LINES 62-71

.. code-block:: Python

    from IPython.display import display
    from gammapy.data import FixedPointingInfo, Observation, observatory_locations
    from gammapy.datasets import Datasets, SpectrumDataset, SpectrumDatasetOnOff
    from gammapy.irf import load_irf_dict_from_file
    from gammapy.makers import SpectrumDatasetMaker
    from gammapy.maps import MapAxis, RegionGeom
    from gammapy.modeling import Fit
    from gammapy.modeling.models import PowerLawSpectralModel, SkyModel








.. GENERATED FROM PYTHON SOURCE LINES 72-74

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 74-79

.. code-block:: Python

    from gammapy.utils.check import check_tutorials_setup

    check_tutorials_setup()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/bin/python 
            python_version         : 3.9.18     
            machine                : x86_64     
            system                 : Linux      


    Gammapy package:

            version                : 1.2.dev2051+gbdbe6fea3.d20240318 
            path                   : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/gammapy 


    Other packages:

            numpy                  : 1.26.4     
            scipy                  : 1.12.0     
            astropy                : 5.2.2      
            regions                : 0.8        
            click                  : 8.1.7      
            yaml                   : 6.0.1      
            IPython                : 8.18.1     
            jupyterlab             : not installed 
            matplotlib             : 3.8.3      
            pandas                 : not installed 
            healpy                 : 1.16.6     
            iminuit                : 2.25.2     
            sherpa                 : 4.16.0     
            naima                  : 0.10.0     
            emcee                  : 3.1.4      
            corner                 : 2.2.2      
            ray                    : 2.9.3      


    Gammapy environment variables:

            GAMMAPY_DATA           : ./gammapy-data 





.. GENERATED FROM PYTHON SOURCE LINES 80-90

Simulation of a single spectrum
-------------------------------

To do a simulation, we need to define the observational parameters like
the livetime, the offset, the assumed integration radius, the energy
range to perform the simulation for and the choice of spectral model. We
then use an in-memory observation which is convolved with the IRFs to
get the predicted number of counts. This is Poisson fluctuated using
the `fake()` to get the simulated counts for each observation.


.. GENERATED FROM PYTHON SOURCE LINES 90-127

.. code-block:: Python


    # Define simulation parameters parameters
    livetime = 1 * u.h

    pointing_position = SkyCoord(0, 0, unit="deg", frame="galactic")
    # We want to simulate an observation pointing at a fixed position in the sky.
    # For this, we use the `FixedPointingInfo` class
    pointing = FixedPointingInfo(
        fixed_icrs=pointing_position.icrs,
    )
    offset = 0.5 * u.deg

    # Reconstructed and true energy axis
    energy_axis = MapAxis.from_edges(
        np.logspace(-0.5, 1.0, 10), unit="TeV", name="energy", interp="log"
    )
    energy_axis_true = MapAxis.from_edges(
        np.logspace(-1.2, 2.0, 31), unit="TeV", name="energy_true", interp="log"
    )

    on_region_radius = Angle("0.11 deg")

    center = pointing_position.directional_offset_by(
        position_angle=0 * u.deg, separation=offset
    )
    on_region = CircleSkyRegion(center=center, radius=on_region_radius)

    # Define spectral model - a simple Power Law in this case
    model_simu = PowerLawSpectralModel(
        index=3.0,
        amplitude=2.5e-12 * u.Unit("cm-2 s-1 TeV-1"),
        reference=1 * u.TeV,
    )
    print(model_simu)
    # we set the sky model used in the dataset
    model = SkyModel(spectral_model=model_simu, name="source")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PowerLawSpectralModel

    type    name     value         unit        error   min max frozen is_norm link prior
    ---- --------- ---------- -------------- --------- --- --- ------ ------- ---- -----
             index 3.0000e+00                0.000e+00 nan nan  False   False           
         amplitude 2.5000e-12 cm-2 s-1 TeV-1 0.000e+00 nan nan  False    True           
         reference 1.0000e+00            TeV 0.000e+00 nan nan   True   False           




.. GENERATED FROM PYTHON SOURCE LINES 128-130

Load the IRFs
In this simulation, we use the CTA-1DC IRFs shipped with Gammapy.

.. GENERATED FROM PYTHON SOURCE LINES 130-143

.. code-block:: Python

    irfs = load_irf_dict_from_file(
        "$GAMMAPY_DATA/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits"
    )

    location = observatory_locations["cta_south"]
    obs = Observation.create(
        pointing=pointing,
        livetime=livetime,
        irfs=irfs,
        location=location,
    )
    print(obs)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/examples/tutorials/analysis-1d/spectrum_simulation.py", line 130, in <module>
        irfs = load_irf_dict_from_file(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/gammapy/irf/io.py", line 197, in load_irf_dict_from_file
        with fits.open(filename) as hdulist:
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/astropy/io/fits/hdu/hdulist.py", line 214, in fitsopen
        return HDUList.fromfile(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/astropy/io/fits/hdu/hdulist.py", line 482, in fromfile
        return cls._readfrom(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/astropy/io/fits/hdu/hdulist.py", line 1170, in _readfrom
        fileobj = _File(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/astropy/io/fits/file.py", line 218, in __init__
        self._open_filename(fileobj, mode, overwrite)
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/astropy/io/fits/file.py", line 636, in _open_filename
        self._file = open(self.name, IO_FITS_MODES[mode])
    FileNotFoundError: [Errno 2] Aucun fichier ou dossier de ce type: 'gammapy-data/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits'




.. GENERATED FROM PYTHON SOURCE LINES 144-146

Simulate a spectra


.. GENERATED FROM PYTHON SOURCE LINES 146-163

.. code-block:: Python


    # Make the SpectrumDataset
    geom = RegionGeom.create(region=on_region, axes=[energy_axis])

    dataset_empty = SpectrumDataset.create(
        geom=geom, energy_axis_true=energy_axis_true, name="obs-0"
    )
    maker = SpectrumDatasetMaker(selection=["exposure", "edisp", "background"])

    dataset = maker.run(dataset_empty, obs)

    # Set the model on the dataset, and fake
    dataset.models = model
    dataset.fake(random_state=42)
    print(dataset)



.. GENERATED FROM PYTHON SOURCE LINES 164-166

You can see that background counts are now simulated


.. GENERATED FROM PYTHON SOURCE LINES 169-178

On-Off analysis
~~~~~~~~~~~~~~~

To do an on off spectral analysis, which is the usual science case, the
standard would be to use `SpectrumDatasetOnOff`, which uses the
acceptance to fake off-counts. Please also refer to the `Dataset simulations`
section in the :doc:`/tutorials/analysis-1d/spectral_analysis_rad_max` tutorial,
dealing with simulations based on observations of real off counts.


.. GENERATED FROM PYTHON SOURCE LINES 178-186

.. code-block:: Python


    dataset_on_off = SpectrumDatasetOnOff.from_spectrum_dataset(
        dataset=dataset, acceptance=1, acceptance_off=5
    )
    dataset_on_off.fake(npred_background=dataset.npred_background())
    print(dataset_on_off)



.. GENERATED FROM PYTHON SOURCE LINES 187-190

You can see that off counts are now simulated as well. We now simulate
several spectra using the same set of observation conditions.


.. GENERATED FROM PYTHON SOURCE LINES 192-206

.. code-block:: Python


    n_obs = 100
    datasets = Datasets()

    for idx in range(n_obs):
        dataset_on_off.fake(random_state=idx, npred_background=dataset.npred_background())
        dataset_fake = dataset_on_off.copy(name=f"obs-{idx}")
        dataset_fake.meta_table["OBS_ID"] = [idx]
        datasets.append(dataset_fake)

    table = datasets.info_table()
    display(table)



.. GENERATED FROM PYTHON SOURCE LINES 207-210

Before moving on to the fit let’s have a look at the simulated
observations.


.. GENERATED FROM PYTHON SOURCE LINES 210-221

.. code-block:: Python


    fix, axes = plt.subplots(1, 3, figsize=(12, 4))
    axes[0].hist(table["counts"])
    axes[0].set_xlabel("Counts")
    axes[1].hist(table["counts_off"])
    axes[1].set_xlabel("Counts Off")
    axes[2].hist(table["excess"])
    axes[2].set_xlabel("excess")
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 222-224

Now, we fit each simulated spectrum individually


.. GENERATED FROM PYTHON SOURCE LINES 226-241

.. code-block:: Python

    results = []

    fit = Fit()

    for dataset in datasets:
        dataset.models = model.copy()
        result = fit.optimize(dataset)
        results.append(
            {
                "index": result.parameters["index"].value,
                "amplitude": result.parameters["amplitude"].value,
            }
        )



.. GENERATED FROM PYTHON SOURCE LINES 242-245

We take a look at the distribution of the fitted indices. This matches
very well with the spectrum that we initially injected.


.. GENERATED FROM PYTHON SOURCE LINES 245-255

.. code-block:: Python


    fig, ax = plt.subplots()
    index = np.array([_["index"] for _ in results])
    ax.hist(index, bins=10, alpha=0.5)
    ax.axvline(x=model_simu.parameters["index"].value, color="red")
    ax.set_xlabel("Reconstructed spectral index")
    print(f"index: {index.mean()} += {index.std()}")
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 256-266

Exercises
---------

-  Change the observation time to something longer or shorter. Does the
   observation and spectrum results change as you expected?
-  Change the spectral model, e.g. add a cutoff at 5 TeV, or put a
   steep-spectrum source with spectral index of 4.0
-  Simulate spectra with the spectral model we just defined. How much
   observation duration do you need to get back the injected parameters?



.. _sphx_glr_download_tutorials_analysis-1d_spectrum_simulation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/notebooks/dev/tutorials/analysis-1d/spectrum_simulation.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: spectrum_simulation.ipynb <spectrum_simulation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: spectrum_simulation.py <spectrum_simulation.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
