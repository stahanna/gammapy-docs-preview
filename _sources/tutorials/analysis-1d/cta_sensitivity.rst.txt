
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/analysis-1d/cta_sensitivity.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_analysis-1d_cta_sensitivity.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_analysis-1d_cta_sensitivity.py:


Point source sensitivity
========================

Estimate the CTA sensitivity for a point-like IRF at a fixed zenith angle and fixed offset.

Introduction
------------

This notebook explains how to estimate the CTA sensitivity for a
point-like IRF at a fixed zenith angle and fixed offset, using the full
containment IRFs distributed for the CTA 1DC. The significance is
computed for a 1D analysis (ON-OFF regions) with the Li&Ma formula.

We use here an approximate approach with an energy dependent integration
radius to take into account the variation of the PSF. We will first
determine the 1D IRFs including a containment correction.

We will be using the following Gammapy class:

-  `~gammapy.estimators.SensitivityEstimator`

.. GENERATED FROM PYTHON SOURCE LINES 24-33

.. code-block:: Python


    import numpy as np
    import astropy.units as u
    from astropy.coordinates import SkyCoord

    # %matplotlib inline
    from regions import CircleSkyRegion
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 34-39

Setup
-----

As usual, we’ll start with some setup …


.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: Python

    from IPython.display import display
    from gammapy.data import FixedPointingInfo, Observation, observatory_locations
    from gammapy.datasets import SpectrumDataset, SpectrumDatasetOnOff
    from gammapy.estimators import FluxPoints, SensitivityEstimator
    from gammapy.irf import load_irf_dict_from_file
    from gammapy.makers import SpectrumDatasetMaker
    from gammapy.maps import MapAxis, RegionGeom
    from gammapy.maps.axes import UNIT_STRING_FORMAT








.. GENERATED FROM PYTHON SOURCE LINES 49-51

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: Python

    from gammapy.utils.check import check_tutorials_setup

    check_tutorials_setup()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/bin/python 
            python_version         : 3.9.18     
            machine                : x86_64     
            system                 : Linux      


    Gammapy package:

            version                : 1.2.dev2051+gbdbe6fea3.d20240318 
            path                   : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/gammapy 


    Other packages:

            numpy                  : 1.26.4     
            scipy                  : 1.12.0     
            astropy                : 5.2.2      
            regions                : 0.8        
            click                  : 8.1.7      
            yaml                   : 6.0.1      
            IPython                : 8.18.1     
            jupyterlab             : not installed 
            matplotlib             : 3.8.3      
            pandas                 : not installed 
            healpy                 : 1.16.6     
            iminuit                : 2.25.2     
            sherpa                 : 4.16.0     
            naima                  : 0.10.0     
            emcee                  : 3.1.4      
            corner                 : 2.2.2      
            ray                    : 2.9.3      


    Gammapy environment variables:

            GAMMAPY_DATA           : ./gammapy-data 





.. GENERATED FROM PYTHON SOURCE LINES 56-63

Define analysis region and energy binning
-----------------------------------------

Here we assume a source at 0.5 degree from pointing position. We perform
a simple energy independent extraction for now with a radius of 0.1
degree.


.. GENERATED FROM PYTHON SOURCE LINES 63-80

.. code-block:: Python


    energy_axis = MapAxis.from_energy_bounds(0.03 * u.TeV, 30 * u.TeV, nbin=20)
    energy_axis_true = MapAxis.from_energy_bounds(
        0.01 * u.TeV, 100 * u.TeV, nbin=100, name="energy_true"
    )

    pointing = SkyCoord(ra=0 * u.deg, dec=0 * u.deg)
    pointing_info = FixedPointingInfo(fixed_icrs=pointing)
    offset = 0.5 * u.deg

    source_position = pointing.directional_offset_by(0 * u.deg, offset)
    on_region_radius = 0.1 * u.deg
    on_region = CircleSkyRegion(source_position, radius=on_region_radius)

    geom = RegionGeom.create(on_region, axes=[energy_axis])
    empty_dataset = SpectrumDataset.create(geom=geom, energy_axis_true=energy_axis_true)








.. GENERATED FROM PYTHON SOURCE LINES 81-86

Load IRFs and prepare dataset
-----------------------------

We extract the 1D IRFs from the full 3D IRFs provided by CTA.


.. GENERATED FROM PYTHON SOURCE LINES 86-97

.. code-block:: Python


    irfs = load_irf_dict_from_file(
        "$GAMMAPY_DATA/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits"
    )
    location = observatory_locations["cta_south"]
    livetime = 50.0 * u.h
    obs = Observation.create(
        pointing=pointing_info, irfs=irfs, livetime=livetime, location=location
    )




.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/examples/tutorials/analysis-1d/cta_sensitivity.py", line 87, in <module>
        irfs = load_irf_dict_from_file(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/gammapy/irf/io.py", line 197, in load_irf_dict_from_file
        with fits.open(filename) as hdulist:
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/astropy/io/fits/hdu/hdulist.py", line 214, in fitsopen
        return HDUList.fromfile(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/astropy/io/fits/hdu/hdulist.py", line 482, in fromfile
        return cls._readfrom(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/astropy/io/fits/hdu/hdulist.py", line 1170, in _readfrom
        fileobj = _File(
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/astropy/io/fits/file.py", line 218, in __init__
        self._open_filename(fileobj, mode, overwrite)
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib64/python3.9/site-packages/astropy/io/fits/file.py", line 636, in _open_filename
        self._file = open(self.name, IO_FITS_MODES[mode])
    FileNotFoundError: [Errno 2] Aucun fichier ou dossier de ce type: 'gammapy-data/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits'




.. GENERATED FROM PYTHON SOURCE LINES 98-103

Initiate and run the `~gammapy.makers.SpectrumDatasetMaker`.

Note that here we ensure ``containment_correction=False`` which allows us to
apply our own containment correction in the next part of the tutorial.


.. GENERATED FROM PYTHON SOURCE LINES 103-110

.. code-block:: Python


    spectrum_maker = SpectrumDatasetMaker(
        selection=["exposure", "edisp", "background"],
        containment_correction=False,
    )
    dataset = spectrum_maker.run(empty_dataset, obs)


.. GENERATED FROM PYTHON SOURCE LINES 111-119

Now we correct for the energy dependent region size.

**Note**: In the calculation of the containment radius, we use the point spread function
which is defined dependent on true energy to compute the correction we apply in reconstructed
energy, thus neglecting the energy dispersion in this step.

Start by correcting the exposure:


.. GENERATED FROM PYTHON SOURCE LINES 119-123

.. code-block:: Python


    containment = 0.68
    dataset.exposure *= containment


.. GENERATED FROM PYTHON SOURCE LINES 124-129

Next, correct the background estimation.

Warning: this neglects the energy dispersion by computing the containment
radius from the PSF in true energy but using the reco energy axis.


.. GENERATED FROM PYTHON SOURCE LINES 129-137

.. code-block:: Python


    on_radii = obs.psf.containment_radius(
        energy_true=energy_axis.center, offset=offset, fraction=containment
    )
    factor = (1 - np.cos(on_radii)) / (1 - np.cos(on_region_radius))
    dataset.background *= factor.value.reshape((-1, 1, 1))



.. GENERATED FROM PYTHON SOURCE LINES 138-141

Finally, define a `~gammapy.datasets.SpectrumDatasetOnOff` with an alpha of 0.2.
The off counts are created from the background model:


.. GENERATED FROM PYTHON SOURCE LINES 141-147

.. code-block:: Python


    dataset_on_off = SpectrumDatasetOnOff.from_spectrum_dataset(
        dataset=dataset, acceptance=1, acceptance_off=5
    )



.. GENERATED FROM PYTHON SOURCE LINES 148-157

Compute sensitivity
-------------------

We impose a minimal number of expected signal counts of 10 per bin and a
minimal significance of 5 per bin. The excess must also be larger than 5% of the background.

We assume an alpha of 0.2 (ratio between ON and OFF area). We then run the sensitivity estimator.

These are the conditions imposed in standard CTA sensitivity computations.

.. GENERATED FROM PYTHON SOURCE LINES 157-165

.. code-block:: Python


    sensitivity_estimator = SensitivityEstimator(
        gamma_min=10,
        n_sigma=5,
        bkg_syst_fraction=0.05,
    )
    sensitivity_table = sensitivity_estimator.run(dataset_on_off)


.. GENERATED FROM PYTHON SOURCE LINES 166-176

Results
-------

The results are given as a `~astropy.table.Table`, which can be written to
disk utilising the usual `~astropy.table.Table.write` method.
A column criterion allows us
to distinguish bins where the significance is limited by the signal
statistical significance from bins where the sensitivity is limited by
the number of signal counts. This is visible in the plot below.


.. GENERATED FROM PYTHON SOURCE LINES 176-180

.. code-block:: Python


    display(sensitivity_table)



.. GENERATED FROM PYTHON SOURCE LINES 181-183

Plot the sensitivity curve


.. GENERATED FROM PYTHON SOURCE LINES 183-212

.. code-block:: Python


    from cycler import cycler

    fig, ax = plt.subplots()

    ax.set_prop_cycle(cycler("marker", "s*v") + cycler("color", "rgb"))

    for criterion in ("significance", "gamma", "bkg"):

        mask = sensitivity_table["criterion"] == criterion
        t = sensitivity_table[mask]

        ax.errorbar(
            t["e_ref"],
            t["e2dnde"],
            xerr=0.5 * (t["e_max"] - t["e_min"]),
            label=criterion,
            linestyle="",
        )

    ax.loglog()

    ax.set_xlabel(f"Energy [{t['e_ref'].unit.to_string(UNIT_STRING_FORMAT)}]")
    ax.set_ylabel(f"Sensitivity [{t['e2dnde'].unit.to_string(UNIT_STRING_FORMAT)}]")

    ax.legend()

    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 213-219

We add some control plots showing the expected number of background
counts per bin and the ON region size cut (here the 68% containment
radius of the PSF).

Plot expected number of counts for signal and background.


.. GENERATED FROM PYTHON SOURCE LINES 219-242

.. code-block:: Python


    fig, ax1 = plt.subplots()
    ax1.plot(
        sensitivity_table["e_ref"],
        sensitivity_table["background"],
        "o-",
        color="black",
        label="blackground",
    )

    ax1.loglog()
    ax1.set_xlabel(f"Energy [{t['e_ref'].unit.to_string(UNIT_STRING_FORMAT)}]")
    ax1.set_ylabel("Expected number of bkg counts")

    ax2 = ax1.twinx()
    ax2.set_ylabel(
        f"ON region radius [{on_radii.unit.to_string(UNIT_STRING_FORMAT)}]", color="red"
    )
    ax2.semilogy(sensitivity_table["e_ref"], on_radii, color="red", label="PSF68")
    ax2.tick_params(axis="y", labelcolor="red")
    ax2.set_ylim(0.01, 0.5)
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 243-252

Obtaining an integral flux sensitivity
--------------------------------------

It is often useful to obtain the integral sensitivity above a certain
threshold. In this case, it is simplest to use a dataset with one energy bin
while setting the high energy edge to a very large value.
Here, we simply squash the previously created dataset into one with a single
energy


.. GENERATED FROM PYTHON SOURCE LINES 252-261

.. code-block:: Python


    dataset_on_off1 = dataset_on_off.to_image()
    sensitivity_estimator = SensitivityEstimator(
        gamma_min=5, n_sigma=3, bkg_syst_fraction=0.10
    )
    sensitivity_table = sensitivity_estimator.run(dataset_on_off1)
    print(sensitivity_table)



.. GENERATED FROM PYTHON SOURCE LINES 262-265

To get the integral flux, we convert to a `~gammapy.estimators.FluxPoints` object
that does the conversion internally.


.. GENERATED FROM PYTHON SOURCE LINES 265-274

.. code-block:: Python


    flux_points = FluxPoints.from_table(
        sensitivity_table, sed_type="e2dnde", reference_model=sensitivity_estimator.spectrum
    )
    print(
        f"Integral sensitivity in {livetime:.2f} above {energy_axis.edges[0]:.2e} "
        f"is {np.squeeze(flux_points.flux.quantity):.2e}"
    )


.. GENERATED FROM PYTHON SOURCE LINES 275-282

Exercises
---------

-  Compute the sensitivity for a 20 hour observation
-  Compare how the sensitivity differs between 5 and 20 hours by
   plotting the ratio as a function of energy.



.. _sphx_glr_download_tutorials_analysis-1d_cta_sensitivity.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/notebooks/dev/tutorials/analysis-1d/cta_sensitivity.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: cta_sensitivity.ipynb <cta_sensitivity.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: cta_sensitivity.py <cta_sensitivity.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
