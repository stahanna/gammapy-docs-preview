
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/api/catalog.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_api_catalog.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_api_catalog.py:


Source catalogs
===============

Access and explore thew most common gamma-ray source catalogs.

Introduction
------------

`~gammapy.catalog` provides convenient access to common gamma-ray
source catalogs. This module is mostly independent of the rest of
Gammapy. Typically, you use it to compare new analyses against catalog
results, e.g. overplot the spectral model, or compare the source
position.

Moreover, as creating a source model and flux points for a given catalog
from the FITS table is tedious, `~gammapy.catalog` has this already
implemented. So you can create initial source models for your analyses.
This is very common for Fermi-LAT, to start with a catalog model. For
TeV analysis, especially in crowded Galactic regions, using the HGPS,
gamma-cat or 2HWC catalog in this way can also be useful.

In this tutorial you will learn how to:

-  List available catalogs
-  Load a catalog
-  Access the source catalog table data
-  Select a catalog subset or a single source
-  Get source spectral and spatial models
-  Get flux points (if available)
-  Get lightcurves (if available)
-  Access the source catalog table data
-  Pretty-print the source information

In this tutorial we will show examples using the following catalogs:

-  `~gammapy.catalog.SourceCatalogHGPS`
-  `~gammapy.catalog.SourceCatalogGammaCat`
-  `~gammapy.catalog.SourceCatalog3FHL`
-  `~gammapy.catalog.SourceCatalog4FGL`

All catalog and source classes work the same, as long as some
information is available. E.g. trying to access a lightcurve from a
catalog and source that does not have that information will return
`None`.

Further information is available at `~gammapy.catalog`.

.. GENERATED FROM PYTHON SOURCE LINES 50-59

.. code-block:: Python


    import numpy as np
    import astropy.units as u

    # %matplotlib inline
    import matplotlib.pyplot as plt
    from IPython.display import display
    from gammapy.catalog import CATALOG_REGISTRY








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 62-67

.. code-block:: Python

    from gammapy.utils.check import check_tutorials_setup

    check_tutorials_setup()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/bin/python 
            python_version         : 3.9.18     
            machine                : x86_64     
            system                 : Linux      


    Gammapy package:

            version                : 1.2.dev2111+g5675db08b.d20240402 
            path                   : /home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy 


    Other packages:

            numpy                  : 1.26.4     
            scipy                  : 1.12.0     
            astropy                : 5.2.2      
            regions                : 0.8        
            click                  : 8.1.7      
            yaml                   : 6.0.1      
            IPython                : 8.18.1     
            jupyterlab             : not installed 
            matplotlib             : 3.8.3      
            pandas                 : not installed 
            healpy                 : 1.16.6     
            iminuit                : 2.25.2     
            sherpa                 : 4.16.0     
            naima                  : 0.10.0     
            emcee                  : 3.1.4      
            corner                 : 2.2.2      
            ray                    : 2.10.0     


    Gammapy environment variables:

            GAMMAPY_DATA           : ./gammapy-data 





.. GENERATED FROM PYTHON SOURCE LINES 68-75

List available catalogs
-----------------------

`~gammapy.catalog` contains a catalog registry `~gammapy.catalog.CATALOG_REGISTRY`,
which maps catalog names (e.g. “3fhl”) to catalog classes
(e.g. `SourceCatalog3FHL`).


.. GENERATED FROM PYTHON SOURCE LINES 75-79

.. code-block:: Python


    print(CATALOG_REGISTRY)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Registry
    --------

    SourceCatalogGammaCat: gamma-cat 
    SourceCatalogHGPS    : hgps 
    SourceCatalog2HWC    : 2hwc 
    SourceCatalog3FGL    : 3fgl 
    SourceCatalog4FGL    : 4fgl 
    SourceCatalog2FHL    : 2fhl 
    SourceCatalog3FHL    : 3fhl 
    SourceCatalog3HWC    : 3hwc 
    SourceCatalog1LHAASO : 1LHAASO 





.. GENERATED FROM PYTHON SOURCE LINES 80-88

Load catalogs
-------------

If you have run `gammapy download datasets` or
`gammapy download tutorials`, you have a copy of the catalogs as FITS
files in `$GAMMAPY_DATA/catalogs`, and that is the default location
where `~gammapy.catalog` loads from.


.. GENERATED FROM PYTHON SOURCE LINES 88-91

.. code-block:: Python


    # # # !ls -1 $GAMMAPY_DATA/catalogs








.. GENERATED FROM PYTHON SOURCE LINES 92-96

.. code-block:: Python


    # # # !ls -1 $GAMMAPY_DATA/catalogs/fermi









.. GENERATED FROM PYTHON SOURCE LINES 97-99

So a catalog can be loaded directly from its corresponding class


.. GENERATED FROM PYTHON SOURCE LINES 99-106

.. code-block:: Python


    from gammapy.catalog import SourceCatalog4FGL

    catalog = SourceCatalog4FGL()
    print("Number of sources :", len(catalog.table))




.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/examples/tutorials/api/catalog.py", line 102, in <module>
        catalog = SourceCatalog4FGL()
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/catalog/fermi.py", line 1278, in __init__
        table = Table.read(filename, hdu="LAT_Point_Source_Catalog")
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/table/connect.py", line 62, in __call__
        out = self.registry.read(cls, *args, **kwargs)
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/io/registry/core.py", line 203, in read
        fileobj = ctx.__enter__()
      File "/home/hstapel/miniforge3/envs/gammapy-dev/lib/python3.9/contextlib.py", line 119, in __enter__
        return next(self.gen)
      File "/home/hstapel/PycharmProjects/projekt_gammapy/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/utils/data.py", line 353, in get_readable_fileobj
        fileobj = io.FileIO(name_or_obj, "r")
    FileNotFoundError: [Errno 2] Aucun fichier ou dossier de ce type: 'gammapy-data/catalogs/fermi/gll_psc_v32.fit.gz'




.. GENERATED FROM PYTHON SOURCE LINES 107-111

Note that it loads the default catalog from `$GAMMAPY_DATA/catalogs`,
you could pass a different `filename` when creating the catalog. For
example here we load an older version of 4FGL catalog:


.. GENERATED FROM PYTHON SOURCE LINES 111-116

.. code-block:: Python


    catalog = SourceCatalog4FGL("$GAMMAPY_DATA/catalogs/fermi/gll_psc_v20.fit.gz")
    print("Number of sources :", len(catalog.table))



.. GENERATED FROM PYTHON SOURCE LINES 117-124

Alternatively you can load a catalog by name via
`CATALOG_REGISTRY.get_cls(name)()` (note the `()` to instantiate a
catalog object from the catalog class - only this will load the catalog
and be useful), or by importing the catalog class
(e.g. `~gammapy.catalog.SourceCatalog3FGL`) directly. The two ways are equivalent, the
result will be the same.


.. GENERATED FROM PYTHON SOURCE LINES 124-129

.. code-block:: Python


    # FITS file is loaded
    catalog = CATALOG_REGISTRY.get_cls("3fgl")()
    print(catalog)


.. GENERATED FROM PYTHON SOURCE LINES 130-131

Let's load the source catalogs we will use throughout this tutorial

.. GENERATED FROM PYTHON SOURCE LINES 131-137

.. code-block:: Python

    catalog_gammacat = CATALOG_REGISTRY.get_cls("gamma-cat")()
    catalog_3fhl = CATALOG_REGISTRY.get_cls("3fhl")()
    catalog_4fgl = CATALOG_REGISTRY.get_cls("4fgl")()
    catalog_hgps = CATALOG_REGISTRY.get_cls("hgps")()



.. GENERATED FROM PYTHON SOURCE LINES 138-150

Catalog table
-------------

Source catalogs are given as `FITS` files that contain one or multiple
tables.

However, you can also access the underlying `astropy.table.Table` for
a catalog, and the row data as a Python `dict`. This can be useful if
you want to do something that is not pre-scripted by the
`~gammapy.catalog.SourceCatalog` classes, such as e.g. selecting sources by sky
position or association class, or accessing special source information.


.. GENERATED FROM PYTHON SOURCE LINES 150-153

.. code-block:: Python


    print(type(catalog_3fhl.table))


.. GENERATED FROM PYTHON SOURCE LINES 154-156

.. code-block:: Python

    print(len(catalog_3fhl.table))


.. GENERATED FROM PYTHON SOURCE LINES 157-160

.. code-block:: Python

    display(catalog_3fhl.table[:3][["Source_Name", "RAJ2000", "DEJ2000"]])



.. GENERATED FROM PYTHON SOURCE LINES 161-165

Note that the catalogs object include a helper property that gives
directly the sources positions as a `~astropy.coordinates.SkyCoord` object (we will show an
usage example in the following).


.. GENERATED FROM PYTHON SOURCE LINES 165-169

.. code-block:: Python


    print(catalog_3fhl.positions[:3])



.. GENERATED FROM PYTHON SOURCE LINES 170-184

Source object
-------------

Select a source
~~~~~~~~~~~~~~~

The catalog entries for a single source are represented by a
`~gammapy.catalog.SourceCatalogObject`. In order to select a source object index into
the catalog using `[]`, with a catalog table row index (zero-based,
first row is `[0]`), or a source name. If a name is given, catalog
table columns with source names and association names (“ASSOC1” in the
example below) are searched top to bottom. There is no name resolution
web query.


.. GENERATED FROM PYTHON SOURCE LINES 184-188

.. code-block:: Python


    source = catalog_4fgl[49]
    print(source)


.. GENERATED FROM PYTHON SOURCE LINES 189-191

.. code-block:: Python

    print(source.row_index, source.name)


.. GENERATED FROM PYTHON SOURCE LINES 192-195

.. code-block:: Python

    source = catalog_4fgl["4FGL J0010.8-2154"]
    print(source.row_index, source.name)


.. GENERATED FROM PYTHON SOURCE LINES 196-198

.. code-block:: Python

    print(source.data["ASSOC1"])


.. GENERATED FROM PYTHON SOURCE LINES 199-203

.. code-block:: Python

    source = catalog_4fgl["PKS 0008-222"]
    print(source.row_index, source.name)



.. GENERATED FROM PYTHON SOURCE LINES 204-213

Note that you can also do a `for source in catalog` loop, to find or
process sources of interest.

Source information
~~~~~~~~~~~~~~~~~~

The source objects have a `data` property that contains the
information of the catalog row corresponding to the source.


.. GENERATED FROM PYTHON SOURCE LINES 213-216

.. code-block:: Python


    print(source.data["Npred"])


.. GENERATED FROM PYTHON SOURCE LINES 217-220

.. code-block:: Python

    print(source.data["GLON"], source.data["GLAT"])



.. GENERATED FROM PYTHON SOURCE LINES 221-224

As for the catalog object, the source object has a `position`
property.


.. GENERATED FROM PYTHON SOURCE LINES 224-228

.. code-block:: Python


    print(source.position.galactic)



.. GENERATED FROM PYTHON SOURCE LINES 229-239

Select a catalog subset
-----------------------

The catalog objects support selection using boolean arrays (of the same
length), so one can create a new catalog as a subset of the main catalog
that verify a set of conditions.

In the next example we selection only few of the brightest sources
brightest sources in the 100 to 200 GeV energy band.


.. GENERATED FROM PYTHON SOURCE LINES 239-247

.. code-block:: Python


    mask_bright = np.zeros(len(catalog_3fhl.table), dtype=bool)
    for k, source in enumerate(catalog_3fhl):
        flux = source.spectral_model().integral(100 * u.GeV, 200 * u.GeV).to("cm-2 s-1")
        if flux > 1e-10 * u.Unit("cm-2 s-1"):
            mask_bright[k] = True
            print(f"{source.row_index:<7d} {source.name:20s} {flux:.3g}")


.. GENERATED FROM PYTHON SOURCE LINES 248-251

.. code-block:: Python

    catalog_3fhl_bright = catalog_3fhl[mask_bright]
    print(catalog_3fhl_bright)


.. GENERATED FROM PYTHON SOURCE LINES 252-255

.. code-block:: Python

    print(catalog_3fhl_bright.table["Source_Name"])



.. GENERATED FROM PYTHON SOURCE LINES 256-260

Similarly we can select only sources within a region of interest. Here
for example we use the `position` property of the catalog object to
select sources within 5 degrees from “PKS 0008-222”:


.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: Python


    source = catalog_4fgl["PKS 0008-222"]
    mask_roi = source.position.separation(catalog_4fgl.positions) < 5 * u.deg

    catalog_4fgl_roi = catalog_4fgl[mask_roi]
    print("Number of sources :", len(catalog_4fgl_roi.table))



.. GENERATED FROM PYTHON SOURCE LINES 269-285

Source models
-------------

The `~gammapy.catalog.SourceCatalogObject` classes have a
`~gammapy.catalog.SourceCatalogObject.sky_model()` model which creates a
`~gammapy.modeling.models.SkyModel` object, with model parameter values
and parameter errors from the catalog filled in.

In most cases, the `~gammapy.catalog.SourceCatalogObject.spectral_model()` method provides the
`~gammapy.modeling.models.SpectralModel` part of the sky model, and the
`~gammapy.catalog.SourceCatalogObject.spatial_model()` method the `~gammapy.modeling.models.SpatialModel`
part individually.

We use the `~gammapy.catalog.SourceCatalog3FHL` for the examples in
this section.


.. GENERATED FROM PYTHON SOURCE LINES 285-291

.. code-block:: Python


    source = catalog_4fgl["PKS 2155-304"]

    model = source.sky_model()
    print(model)


.. GENERATED FROM PYTHON SOURCE LINES 292-294

.. code-block:: Python

    print(model)


.. GENERATED FROM PYTHON SOURCE LINES 295-297

.. code-block:: Python

    print(model.spatial_model)


.. GENERATED FROM PYTHON SOURCE LINES 298-300

.. code-block:: Python

    print(model.spectral_model)


.. GENERATED FROM PYTHON SOURCE LINES 301-308

.. code-block:: Python

    energy_bounds = (100 * u.MeV, 100 * u.GeV)
    opts = dict(sed_type="e2dnde", yunits=u.Unit("TeV cm-2 s-1"))
    model.spectral_model.plot(energy_bounds, **opts)
    model.spectral_model.plot_error(energy_bounds, **opts)
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 309-314

You can create initial source models for your analyses using the
`~gammapy.catalog.SourceCatalog.to_models()` method of the catalog objects. Here for example we
create a `~gammapy.modeling.models.Models` object from the 4FGL catalog subset we previously
defined:


.. GENERATED FROM PYTHON SOURCE LINES 314-319

.. code-block:: Python


    models_4fgl_roi = catalog_4fgl_roi.to_models()
    print(models_4fgl_roi)



.. GENERATED FROM PYTHON SOURCE LINES 320-330

Specificities of the HGPS catalog
---------------------------------

Using the `~gammapy.catalog.SourceCatalog.to_models()` method for the
`~gammapy.catalog.SourceCatalogHGPS` will return only the models
components of the sources retained in the main catalog, several
candidate objects appears only in the Gaussian components table (see
section 4.9 of the HGPS paper, https://arxiv.org/abs/1804.02432). To
access these components you can do the following:


.. GENERATED FROM PYTHON SOURCE LINES 330-337

.. code-block:: Python


    discarded_ind = np.where(
        ["Discarded" in _ for _ in catalog_hgps.table_components["Component_Class"]]
    )[0]
    discarded_table = catalog_hgps.table_components[discarded_ind]



.. GENERATED FROM PYTHON SOURCE LINES 338-341

There is no spectral model available for these components but you can
access their spatial models:


.. GENERATED FROM PYTHON SOURCE LINES 341-347

.. code-block:: Python


    discarded_spatial = [
        catalog_hgps.gaussian_component(idx).spatial_model() for idx in discarded_ind
    ]



.. GENERATED FROM PYTHON SOURCE LINES 348-354

In addition to the source components the HGPS catalog include a large
scale diffuse component built by fitting a gaussian model in a sliding
window along the Galactic plane. Information on this model can be
accessed via the properties `~gammapy.catalog.SourceCatalogHGPS.table_large_scale_component` and
`~gammapy.catalog.SourceCatalogHGPS.large_scale_component` of `~gammapy.catalog.SourceCatalogHGPS`.


.. GENERATED FROM PYTHON SOURCE LINES 354-361

.. code-block:: Python


    # here we show the 5 first elements of the table
    display(catalog_hgps.table_large_scale_component[:5])
    # you can also try :
    # help(catalog_hgps.large_scale_component)



.. GENERATED FROM PYTHON SOURCE LINES 362-368

Flux points
-----------

The flux points are available via the `~gammapy.catalog.SourceCatalogObject.flux_points` property as a
`~gammapy.estimators.FluxPoints` object.


.. GENERATED FROM PYTHON SOURCE LINES 368-375

.. code-block:: Python


    source = catalog_4fgl["PKS 2155-304"]
    flux_points = source.flux_points


    print(flux_points)


.. GENERATED FROM PYTHON SOURCE LINES 376-378

.. code-block:: Python

    display(flux_points.to_table(sed_type="flux"))


.. GENERATED FROM PYTHON SOURCE LINES 379-383

.. code-block:: Python

    flux_points.plot(sed_type="e2dnde")
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 384-391

Lightcurves
-----------

The Fermi catalogs contain lightcurves for each source. It is available
via the `source.lightcurve` method as a
`~gammapy.estimators.FluxPoints` object with a time axis.


.. GENERATED FROM PYTHON SOURCE LINES 391-396

.. code-block:: Python


    lightcurve = catalog_4fgl["4FGL J0349.8-2103"].lightcurve()

    print(lightcurve)


.. GENERATED FROM PYTHON SOURCE LINES 397-399

.. code-block:: Python

    display(lightcurve.to_table(format="lightcurve", sed_type="flux"))


.. GENERATED FROM PYTHON SOURCE LINES 400-404

.. code-block:: Python

    lightcurve.plot()
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 405-410

Pretty-print source information
-------------------------------

A source object has a nice string representation that you can print.


.. GENERATED FROM PYTHON SOURCE LINES 410-415

.. code-block:: Python


    source = catalog_hgps["MSH 15-52"]
    print(source)



.. GENERATED FROM PYTHON SOURCE LINES 416-420

You can also call `source.info()` instead and pass as an option what
information to print. The options available depend on the catalog, you
can learn about them using `help()`


.. GENERATED FROM PYTHON SOURCE LINES 420-423

.. code-block:: Python


    help(source.info)


.. GENERATED FROM PYTHON SOURCE LINES 424-425

.. code-block:: Python

    print(source.info("associations"))


.. _sphx_glr_download_tutorials_api_catalog.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/notebooks/dev/tutorials/api/catalog.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: catalog.ipynb <catalog.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: catalog.py <catalog.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
